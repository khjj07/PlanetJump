local DefRX= require "DefUtil.DefRX.DefRX"
local STATE={
	float=hash("float"),
	stand=hash("stand"),
	dead=hash("dead")
}
local ROTATE_SCALING = 30
local HEX = {0,1,2,3,4,5,6,7,8,9,"A","B","C","D","E","F"}
go.property("jumpforce", 4800)
go.property("play", false)


local function draw_line(from, to,color)
	color=color or vmath.vector4(1,0,0,1)
	--msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = color })
end
local function jump(self)
	local planet_pos = go.get_position(self.parent_planet)
	self.flag_parent=self.parent_planet
	self.parent_planet=nil
	go.set_parent(".",self.parent_planet,true)
	local jump_direction = vmath.normalize(go.get_world_position()-planet_pos)
	self.vel=self.vel+jump_direction*self.jumpforce--+self.rotate_vel
	DefRX.notify("jump", {position=go.get_world_position()})
	sound.play("#jump")
	particlefx.play("#player_jump")
	timer.delay(0.3, false, function()
		if self.state==STATE.stand then
			self.state=STATE.float
		end
	end)

	self.asphyxiation_timer = timer.delay(0.4, false, function()
		if self.state==STATE.float then
			DefRX.notify("asphyxiation")
		end
	end)
end

local function land(self,message)
	self.float_handler=nil
	self.state=STATE.stand
	self.gravity=vmath.vector3()
	self.vel=vmath.vector3()
	self.parent_planet=message.other_id
	if self.asphyxiation_timer then
		timer.cancel(self.asphyxiation_timer)
		self.asphyxiation_timer=nil
	end
	DefRX.notify("breathing")
	local planet_pos = go.get_world_position(self.parent_planet)
	local normal = vmath.normalize(go.get_world_position()-planet_pos)
	if vmath.length(normal+vmath.vector3(0,-1,0)) > 0.1  then
		local rot = vmath.quat_from_to(vmath.vector3(0,1,0), normal)
		go.set_rotation(rot)
	else
		go.set_rotation(vmath.quat_rotation_z(0))
	end
	go.set_position(go.get_position()+message.distance*normal)
	go.set_parent(".",self.parent_planet,true)
	DefRX.notify("landing", {position=planet_pos})
	particlefx.play("#player_land")
end

function apply_gravity_force(self, message_id, message, sender)
	if self.state == STATE.float then
		self.vel=self.vel+message.force
	end
	if self.parent_planet then
		local planet_pos = go.get_position(self.parent_planet)
		local jump_direction = vmath.normalize(go.get_world_position()-planet_pos)
		--draw_line(go.get_world_position(), go.get_world_position()+jump_direction)
	end
end
local function dead(self, message_id, message, sender)
	DefRX.cancel_all_observing(self)
	self.state=STATE.dead
	self.vel=vmath.vector3()
	particlefx.play("#player_dead")
	particlefx.set_constant("#player_dead","emitter","tint",self.trail_color)
	particlefx.set_constant("#player_dead","emitter1","tint",self.trail_color)
	go.delete_all(self.ids)
end

function trail_loaded(self, url, result)
	local trail = factory.create(self.trail_shape,vmath.vector3(),nil,{color=self.trail_color},1)
	go.set_parent(trail,".")
	table.insert(self.ids, trail)
end

local function initialize(self, message_id, message, sender)
	self.play=true
	print(self.trail_shape)
	factory.load(self.trail_shape,trail_loaded)
	--msg.post("#player_trail", "play_animation",{id=self.trail_shape})
end

local function pause_time(self, message_id, message, sender)
	msg.post(".", "release_input_focus")
end

local function play_time(self, message_id, message, sender)
	msg.post(".", "acquire_input_focus")
end
local function on_gui(self, message_id, message, sender)
	self.on_gui=message.value
end

local function flag_up(self, message_id, message, sender)
	local flag = factory.create("#flag",go.get_world_position()+message.dist_vector+vmath.vector3(0,0,0.3),nil,{color=self.trail_color})
	go.set_parent(flag,self.flag_parent,true)
	msg.post(self.flag_parent, "flag",{id=flag})
	self.flag_parent=nil
end

function init(self)
	DefRX.create_stream("gravity")
	DefRX.observe(self, "gravity", apply_gravity_force)
	DefRX.create_stream("flag_up")
	DefRX.observe(self, "flag_up", flag_up)
	DefRX.create_stream("game_start")
	DefRX.observe(self, "game_start", initialize)
	DefRX.create_stream("player_dead")
	DefRX.observe(self, "player_dead", dead)
	DefRX.create_stream("pause_time")
	DefRX.observe(self, "pause_time",pause_time)
	DefRX.create_stream("play_time")
	DefRX.observe(self, "play_time",play_time)
	DefRX.create_stream("on_gui")
	DefRX.observe(self, "on_gui",on_gui)
	DefRX.create_stream("trail_color")
	DefRX.observe(self, "trail_color",function(self, message_id, message, sender)
		self.trail_color = message.color
	end)
	DefRX.create_stream("trail_shape")
	DefRX.observe(self, "trail_shape",function(self, message_id, message, sender)
		self.trail_shape = message.shape
	end)
	DefRX.create_stream("player_skin")
	DefRX.observe(self, "player_skin",function(self, message_id, message, sender)
		msg.post("#sprite", "play_animation",{id=hash(message.id)})
	end)
	
	DefRX.create_stream("player_controll_enable")
	DefRX.observe(self, "player_controll_enable",function(self, message_id, message, sender)
		msg.post(".", "acquire_input_focus")
	end)
	self.skin=1
	self.vel=vmath.vector3()
	self.gravity=vmath.vector3()
	self.parent_planet=nil
	self.state=STATE.float
	self.on_gui=false
	self.ids={"player","sight"}
	msg.post("#sprite", "play_animation",{id=hash("player"..self.skin)})
	math.randomseed(os.time())
end

function update(self,dt)
	if self.state == STATE.float then
		if vmath.length(self.vel)>0 and not self.rotation_fix then
			local normal = vmath.normalize(self.vel)
			if vmath.length(normal+vmath.vector3(0,-1,0)) > 0.1  then
				local rot = vmath.quat_from_to(vmath.vector3(0,1,0), normal)
				go.set_rotation(rot)
			else
				go.set_rotation(vmath.quat_rotation_z(-math.pi))
			end
			DefRX.notify("floating", {position=go.get_position()})
			DefRX.notify("spawn_planet", {position=go.get_world_position()})
		end
	end
	local pos = go.get_position()+self.vel*dt
	--debugging
	--[[for i = 1, 360,10 do
		local x=math.sin(math.pi/180*i)*1750*3.5
		local y=math.cos(math.pi/180*i)*1750*3.5
		draw_line(go.get_world_position(),go.get_world_position()+vmath.vector3(x,y,0),vmath.vector4(1,1,0,1))
	end
	--]]
	--draw_line(go.get_world_position(),go.get_world_position()+self.vel*dt*10,vmath.vector4(1,1,0,1))
	go.set_position(pos)
	if self.play then
		DefRX.notify("player_position", {position=go.get_world_position()})
	end
end

function on_message(self, message_id, message, sender)
	DefRX.on_message(self, message_id, message, sender)
	if message_id==hash("contact_point_response") then
		if message.other_group==hash("planet") and self.state==STATE.float then
			DefRX.notify("spawn_planet", {position=go.get_world_position()})
			land(self,message)
		end
		if message.other_group==hash("satellite") and self.state==STATE.float then
			
		end
	end
	if message_id==hash("trigger_response") then
		if message.enter and vmath.length(self.gravity)>0 then
			
			local rot = vmath.quat_from_to(vmath.vector3(0,1,0), vmath.normalize(self.gravity))
			go.animate(".", "rotation",go.PLAYBACK_ONCE_FORWARD, rot, go.EASING_LINEAR, 0.1)
		elseif not message.enter then
			self.state=STATE.float
		end
	end
	if message_id==hash("hit") then
		if self.state ~= STATE.dead then
			DefRX.notify("game_over",{position=go.get_world_position()})
			DefRX.notify("player_dead")
		end
	end	
end

function final(self)
	DefRX.cancel_all_observing(self)
end

function on_input(self, action_id, action)
	if not self.on_gui and self.play and action_id==hash("touch") and action.pressed and self.state==STATE.stand then
		jump(self)
	end
end