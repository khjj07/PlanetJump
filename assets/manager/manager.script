local defrx= require "defrx.defrx"
local defsave = require("defsave.defsave")
local SCORE_DELAY = 1
local DEFAULT_SCORE = 10
local LEVEL={
	15,
	40,
	65,
	95,
	130,
	170,
	215,
	265,
	320
}

local SKIN = {
	{name = "player1", price=0},
	{name = "player2", price=300},
	{name = "player3", price=500},
	{name = "player4", price=1000},
	{name = "player5", price=2000},
	{name = "player6", price=700}
}


function get_level(self)
	for i, lv in pairs(LEVEL) do
		if self.flag<lv then
			return i
		end
	end
	return #LEVEL
end


function init(self)
	self.score=0
	self.flag=0
	self.combo=0
	self.max_combo=0
	self.level=1
	self.bgm=true
	self.sfx=true

	defrx.create_stream("game_over")
	defrx.observe(self, "game_over", function(self, message_id, message, sender)
		local best_score = defsave.get("basic", "best_score")
		if best_score < self.score then
			defsave.set("basic", "best_score", self.score)
		end
		defsave.set("basic", "flag", defsave.get("basic", "flag") + self.flag)
		defsave.save("basic", true)
		defrx.notify("final_score",{score=self.score,flag=self.flag,max_combo=self.max_combo,best_score=defsave.get("basic", "best_score")})
		defrx.notify("play_sfx", {sound="#game_over",gain=1})
	end)

	defrx.create_stream("game_start")
	defrx.observe(self, "game_start", function(self, message_id, message, sender)
		self.score=0
		self.flag=0
		self.combo=0
		self.max_combo=0
	end)
	defrx.create_stream("flag_up")
	defrx.observe(self, "flag_up", function(self, message_id, message, sender)
		self.flag=self.flag+1
		self.level=get_level(self)
		print("level : "..self.level)
		defrx.notify("level",{level=self.level,flag=self.flag})
	end)

	defrx.create_stream("add_combo")
	defrx.observe(self, "add_combo", function(self, message_id, message, sender)
		self.combo=self.combo+1
		if self.combo> self.max_combo then
			self.max_combo=self.combo
		end
		local num=self.combo
		if num>30 then
			num=30
		end
		sound.play("#combo"..num)
		defrx.notify("combo", {combo=self.combo})
	end)

	defrx.create_stream("break_combo")
	defrx.observe(self, "break_combo", function(self, message_id, message, sender)
		if self.combo >0 then
			self.combo=0
			defrx.notify("combo_break")
		end
	end)


	defrx.create_stream("add_score")
	defrx.observe(self, "add_score", function(self, message_id, message, sender)
		self.score=self.score+DEFAULT_SCORE*(self.combo+1)
		defrx.notify("score",{score=self.score})
	end)

	defrx.create_stream("set_sound")
	defrx.observe(self, "set_sound", function(self, message_id, message, sender)
		self.bgm=message.bgm
		self.sfx=message.sfx
		if self.sfx then
			sound.set_group_gain(hash("sfx"), 1)
		else
			sound.set_group_gain(hash("sfx"), 0)
		end
		if self.bgm then
			sound.set_group_gain(hash("bgm"), 1)
		else
			sound.set_group_gain(hash("bgm"), 0)
		end
		defrx.notify("change_sound", {bgm=self.bgm,sfx=self.sfx})
	end)

	defrx.create_stream("scene_loaded")
	defrx.observe(self, "scene_loaded", function(self, message_id, message, sender)
		defrx.notify("change_sound", {bgm=self.bgm,sfx=self.sfx})
		defsave.set_appname("planuts")
		defsave.default_data = require("assets.manager.default_data")
		defsave.load("basic")
		defsave.load("store")
		defsave.load("color")
		defsave.load("shape")
		self.skin_data={}
		for _, skin in pairs(SKIN) do
			table.insert(self.skin_data, skin)
		end
		for _, skin in pairs(self.skin_data) do
			skin.own=defsave.get("store", "own")[skin.name]
			skin.equip=defsave.get("store", "equip")[skin.name]
			if defsave.get("store", "equip")[skin.name] then
				defrx.notify("player_skin", {id=skin.name})
				defrx.notify("set_skin_cursor",{num=_})
			end
		end
		defrx.notify("skin_data", self.skin_data)
		
	end)
	

	defrx.create_stream("play_sfx")
	defrx.observe(self, "play_sfx", function(self, message_id, message, sender)
		sound.play(message.sound,{gain=message.gain})
	end)
	
	defrx.create_stream("trail_color")
	defrx.observe(self, "trail_color", function(self, message_id, message, sender)
		defsave.set("color", "i",message.i)
		defsave.set("color", "j",message.j)
		defsave.save("color")
	end)
	
	defrx.create_stream("trail_shape")
	defrx.observe(self, "trail_shape", function(self, message_id, message, sender)
		defsave.set("shape", "i",message.i)
		defsave.set("shape", "j",message.j)
		defsave.save("shape")
	end)
	
	defrx.create_stream("request_data")
	defrx.observe(self, "request_data", function(self, message_id, message, sender)
		if message.name=="flag" then
			defrx.notify("get_flag",{flag = defsave.get("basic", "flag")})
		end	
	end)

	defrx.create_stream("request_purchase")
	defrx.observe(self, "request_purchase", function(self, message_id, message, sender)
		if defsave.get("basic", "flag")>=self.skin_data[message.num].price then
			defsave.set("basic", "flag",defsave.get("basic", "flag")-self.skin_data[message.num].price)
			self.skin_data[message.num].own=true
			local own={}
			for _, data in pairs(self.skin_data) do
				own[data.name]=data.own
			end
			defsave.set("store", "own",own)
			defsave.save("store", true)
			defsave.save("basic", true)
			defrx.notify("get_flag",{flag = defsave.get("basic", "flag")})
			self.skin_data={}
			for _, skin in pairs(SKIN) do
				table.insert(self.skin_data, skin)
			end
			for _, skin in pairs(self.skin_data) do
				skin.own=defsave.get("store", "own")[skin.name]
				skin.equip=defsave.get("store", "equip")[skin.name]
			end
			defrx.notify("skin_data", self.skin_data)
			sound.play("#purchase")
		else
			sound.play("#purchase_fail")
		end
	end)
	
	defrx.create_stream("request_equip")
	defrx.observe(self, "request_equip", function(self, message_id, message, sender)
		local equip={}
		for _, data in pairs(self.skin_data) do
			if _ ~=message.num then
				equip[data.name]=false
			else
				equip[data.name]=true
				defrx.notify("player_skin", {id=data.name})
			end
		end
		defsave.set("store", "equip",equip)
		defsave.save("store", true)
		self.skin_data={}
		for _, skin in pairs(SKIN) do
			table.insert(self.skin_data, skin)
		end
		for _, skin in pairs(self.skin_data) do
			skin.own=defsave.get("store", "own")[skin.name]
			skin.equip=defsave.get("store", "equip")[skin.name]
		end
		defrx.notify("skin_data", self.skin_data)
	end)
end

function update(self,dt)
	defsave.update(dt)
end

function final(self)
	defrx.cancel_all_observing(self)
	defsave.save_all(true)
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
end