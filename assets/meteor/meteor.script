local defrx= require "defrx.defrx"
local NEAR_DISTANCE = 4000
local MAX_DISTANCE = 12000
local DEFAULT_RANGE=1750
local TYPE={
	strong=hash("strong"),
	weak=hash("weak")
}
go.property("speed", 0)
go.property("direction", vmath.vector3())
go.property("type", hash(""))
go.property("rotate_speed", 20)
go.property("rotate_direction", 1)

function check_meteor(self, message_id, message, sender)
	self.distance = vmath.length(message.position-go.get_world_position())
	if MAX_DISTANCE<self.distance then
		defrx.cancel_all_observing(self)
		go.delete()
	end
end

function alert_routine(self, message_id, message, sender)
	local result = physics.raycast(go.get_world_position(), go.get_world_position()+self.direction*10000, {hash("camera")})
	--msg.post("@render:", "draw_line", { start_point = go.get_world_position(), end_point = go.get_world_position()+self.direction*10000, color = vmath.vector4(1,0,0,1) })
	if result then
		msg.post(self.alert, "enable")
		go.set_position(result.position,self.alert)
	else
		msg.post(self.alert, "disable")
	end
end

function init(self)
	if self.rotate_direction == 0 then
		self.rotate_direction=-1
	end
	self.vel=self.speed*self.direction
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/self.rotate_speed)
	if TYPE.strong==self.type then
		particlefx.play("#strong_meteor_trail")
		self.damage=2
	else
		particlefx.play("#weak_meteor_trail")
		self.damage=1
	end
	self.alert = factory.create("#alert",vmath.vector3(),nil,nil,4)

	defrx.create_stream("player_position")
	defrx.observe(self, "player_position", check_meteor)
	defrx.create_stream("camera_position")
	defrx.observe(self, "camera_position", alert_routine)
	
end

function update(self, dt)
	local pos = go.get_position()+self.vel*dt
	self.play=false
	go.set_position(pos)
end

function explosion(self)
	local gain = 1500
	if TYPE.strong==self.type then
		particlefx.play("#strong_explosion")
		defrx.notify("strong_hit")
		gain=gain*1.5
	else
		particlefx.play("#weak_explosion")
		defrx.notify("weak_hit")
	end
	if self.distance then
		gain = gain/self.distance
	else
		gain=0
	end
	defrx.notify("play_sfx", {sound="#explosion_meteor",gain=gain})
end

function final(self)
	defrx.cancel_all_observing(self)
	go.delete(self.alert)
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
	if message_id==hash("trigger_response") and message.enter then
		msg.post(message.other_id, "hit",{damage=self.damage,direction=self.direction})
		explosion(self)
		defrx.cancel_all_observing(self)
		go.delete()
	end
	if message_id==hash("collision_response") then
		if message.other_id==hash("camera") then
			msg.post(self.alert, "disable")
		end 
	end
end
