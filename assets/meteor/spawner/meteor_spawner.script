local DefRX= require "DefUtil.DefRX.DefRX"
go.property("target", hash(""))
go.property("weak_min_scale", 150)
go.property("weak_max_scale", 200)
go.property("strong_min_scale", 300)
go.property("strong_max_scale", 500)
go.property("min_distance", 0)
go.property("max_distance", 100)
go.property("min_distance", 0)
go.property("min_speed", 1000)
go.property("max_speed", 3000)
go.property("min_rotate_speed", 0)
go.property("max_rotate_speed", 60)
go.property("min_delay", 2000)
go.property("max_delay", 4000)
go.property("strong_type_rate", 0.3)

local OUTER_RANGE = 6000
local INNER_RANGE = 500
local DISTANCE_RANGE = 200
local MAX_RETRY = 500
local TYPE={
	strong=hash("strong"),
	weak=hash("weak")
}

local LEVEL = 
{
	{min_speed=1000,max_speed=2100,min_delay=3000,max_delay=5000},
	{min_speed=1000,max_speed=2200,min_delay=2750,max_delay=4900},
	{min_speed=1000,max_speed=2300,min_delay=2500,max_delay=4600},
	{min_speed=1000,max_speed=2400,min_delay=2250,max_delay=4300},
	{min_speed=1000,max_speed=2500,min_delay=2000,max_delay=4000},
	{min_speed=1000,max_speed=2600,min_delay=1750,max_delay=3700},
	{min_speed=1000,max_speed=2700,min_delay=1500,max_delay=3400},
	{min_speed=1000,max_speed=2800,min_delay=1250,max_delay=3100},
	{min_speed=1000,max_speed=2900,min_delay=1000,max_delay=2800},
	{min_speed=1000,max_speed=3000,min_delay=500,max_delay=2250}
}
local function set_level(self,message_id, message, sender)
	self.min_speed = LEVEL[message.level].min_speed
	self.max_speed = LEVEL[message.level].max_speed
	self.min_delay = LEVEL[message.level].min_delay
	self.max_delay = LEVEL[message.level].max_delay
end

local function check_spawnable(self,new_meteor)
	for _, planet in pairs(self.planet) do
		local distance = vmath.length(new_meteor.position-planet)
		if DISTANCE_RANGE > distance then
			return false
		end
	end
	return true
end

local function random_position_in_range(self)
	local pos = vmath.vector3()
	pos=pos+self.center
	local theta = math.pi/180*math.random(1,360)
	local radius = OUTER_RANGE+math.random(self.min_distance,self.max_distance)
	pos.x = pos.x + math.sin(theta)*radius
	pos.y = pos.y + math.cos(theta)*radius
	return pos
end

local function random_direction_in_range(self,from)
	local pos = vmath.vector3()
	pos=pos+self.center
	local theta = math.pi/180*math.random(1,360)
	local radius = INNER_RANGE*2+math.random(self.min_distance,self.max_distance)
	pos.x = pos.x + math.sin(theta)*radius
	pos.y = pos.y + math.cos(theta)*radius
	return vmath.normalize(pos-from)
end
local function random_type(self)
	local num = math.random(1,100)/100
	if num < self.strong_type_rate then
		return TYPE.strong
	else
		return TYPE.weak
	end
end
local function random_scale(self,type)
	if type==TYPE.strong then
		return math.random(self.strong_min_scale,self.strong_max_scale)/100
	else
		return math.random(self.weak_min_scale,self.weak_max_scale)/100
	end
end



local function random_direction_with_directional()
	local x,y = math.sin(math.random(1,360)),math.sin(math.random(1,360))
	local direction = vmath.normalize(vmath.vector3(x,y,0))
	return direction
end


local function spawn_meteor_directly(self,message_id, message, sender)
	local new_meteor={}

	new_meteor.type = hash("weak")
	new_meteor.position = message.position
	new_meteor.scale = random_scale(self,new_meteor.type)
	new_meteor.speed = math.random(self.min_speed,self.max_speed)
	new_meteor.direction= random_direction_with_directional()
	new_meteor.rotate_direction = math.random(0,1)
	new_meteor.rotate_speed= math.random(self.min_rotate_speed,self.max_rotate_speed)
	local prop = {
		direction = new_meteor.direction,speed=new_meteor.speed,type=new_meteor.type,
		rotate_direction=new_meteor.rotate_direction,rotate_speed=new_meteor.rotate_speed
	}
	print(msg.url())
	timer.delay(message.delay, false, function()
		local instance = factory.create("#meteor",new_meteor.position,nil,prop,new_meteor.scale)
	end)
end

local function spawn(self,center)
	local new_meteor={}
	new_meteor.type = random_type(self)
	new_meteor.position = random_position_in_range(self)
	new_meteor.scale = random_scale(self,new_meteor.type)
	new_meteor.speed = math.random(self.min_speed,self.max_speed)
	new_meteor.direction= random_direction_in_range(self,new_meteor.position)
	new_meteor.rotate_direction = math.random(0,1)
	new_meteor.rotate_speed= math.random(self.min_rotate_speed,self.max_rotate_speed)
	local retry=0
	while retry<MAX_RETRY and not check_spawnable(self,new_meteor) do
		new_meteor.position = random_position_in_range(self) 
		new_meteor.scale = random_scale(self,new_meteor.type)
		new_meteor.direction= random_direction_in_range(self,new_meteor.position)
		retry=retry+1
	end
	if retry~=MAX_RETRY then
		local prop = {
			direction = new_meteor.direction,speed=new_meteor.speed,type=new_meteor.type,
			rotate_direction=new_meteor.rotate_direction,rotate_speed=new_meteor.rotate_speed
		}
		local instance = factory.create("#meteor",new_meteor.position,nil,prop,new_meteor.scale)
	end
end

function game_over(self, message_id, message, sender)
	self.game_over=true
end

local function spawn_routine(self,message_id, message, sender)
	timer.delay(math.random(self.min_delay,self.max_delay)/1000, false, function()
		if not self.game_over then
			spawn(self,self.center)
			spawn_routine(self,message_id, message, sender)
		end
	end)
end



function set_center_position(self, message_id, message, sender)
	self.center=message.position
end

function update_planet(self, message_id, message, sender)
	self.planet=message
end

function init(self)
	timer.delay(0.1, false, function()
		math.randomseed(os.time())
	end)
	DefRX.create_stream("game_start")
	DefRX.observe(self, "game_start", function(self, message_id, message, sender)
		spawn_routine(self,message_id, message, sender)
		spawn_routine(self,message_id, message, sender)
	end)
	DefRX.create_stream("player_position")
	DefRX.observe(self, "player_position", set_center_position)
	DefRX.create_stream("planet_position")
	DefRX.observe(self, "planet_position", update_planet)
	DefRX.create_stream("spawn_meteor")
	DefRX.observe(self, "spawn_meteor", spawn_meteor_directly)
	DefRX.create_stream("level")
	DefRX.observe(self, "level", set_level)
	DefRX.create_stream("game_over")
	DefRX.observe(self, "game_over", game_over)
	self.planet={}
end


function final(self)
	DefRX.cancel_all_observing(self)
end

function on_message(self, message_id, message, sender)
	DefRX.on_message(self, message_id, message, sender)
end