local defui= require "defui.defui"
local defrx= require "defrx.defrx"
local defsave = require("defsave.defsave")
local UI = require "assets.ui.main.main"
local PROXY = msg.url("main:/scene_proxy")
local CAM_MOVE_OFFSET=3000
local MAXPOINT=6
local PURPLE = vmath.vector4(0.6,0.4,0.6,1)
local store = require "assets.ui.store.store" 
local color = require("color-lib.color")


local function move_y(node,y,delay)
	node:animate("position.y", y, gui.EASING_INBACK, 0.7,delay)
end

local function scale_btn(node,scale,delay)
	node:animate("scale", scale, gui.EASING_INBACK, 0.7,delay)
end

function start(self,action_id,action,button)
		msg.post(".", "release_input_focus")
		move_y(self.node["title/title"],1500,0.1)
		scale_btn(self.node["title/option_btn"],0.01,0.1)
		scale_btn(self.node["title/medal_btn"],0.01,0.2)
		scale_btn(self.node["title/credit_btn"],0.01,0.1)
		scale_btn(self.node["title/leader_board_btn"],0.01,0.2)
		scale_btn(self.node["title/store_btn"],0.01,0.2)
		scale_btn(self.node["title/tap_to_start"],0.01,0)
		timer.delay(0.2, false, function()
			defrx.notify("game_start")
			sound.play("#game_start")
		end)
		timer.delay(1, false, function()
			self.node["title/window"]:hide()
			self.play=true
			self.node["ingame/window"]:show()
			self.node["ingame/score"]:set_text(0)
			self.node["ingame/flag"]:set_text(0)
			msg.post(".", "acquire_input_focus")
			sound.play("#bgm")
		end)
end

function show_store(self,action_id,action,button)
		sound.play("#slide_in",{delay=0.1})
		self.node["title/window"]:animate("position.y", 1500, gui.EASING_INBACK, 1,0)
		defrx.notify("move_cam", {position=vmath.vector3(0,-CAM_MOVE_OFFSET,0),duration=1,easing=gui.EASING_INBACK})
		self.node["store/window"]:show()
		self.node["store/window"]:set_position(vmath.vector3(0,-1500,0))
		msg.post(".", "release_input_focus")
		self.node["store/window"]:animate("position.y", 0, gui.EASING_OUTBACK, 1,0.8,function()
			msg.post(".", "acquire_input_focus")
		end)
		self.node["store/planet"]:change_texture("planet"..math.random(1,8))
		button:set_scale(button.original_scale)
end

function show_option(self,action_id,action,button)
		sound.play("#slide_in",{delay=0.1})
		self.node["title/window"]:animate("position.x", -850, gui.EASING_INBACK, 1,0)
		msg.post(".", "release_input_focus")
		defrx.notify("move_cam", {position=vmath.vector3(CAM_MOVE_OFFSET,0,0),duration=1,easing=gui.EASING_INBACK})
		timer.delay(1, false, function()
			self.node["title/window"]:hide()
			self.node["option/window"]:show()
			self.node["option/option_window"]:set_scale(vmath.vector3(0.01,0.01,0.01))
			self.node["option/option_window"]:animate("scale", 1, gui.EASING_OUTBACK, 1,0)
			msg.post(".", "acquire_input_focus")
		end)
		button:set_scale(button.original_scale)
end

function show_credits(self,action_id,action,button)
		sound.play("#slide_in",{delay=0.1})
		self.node["title/window"]:animate("position.x", 850, gui.EASING_INBACK, 1,0)
		msg.post(".", "release_input_focus")
		defrx.notify("move_cam", {position=vmath.vector3(-CAM_MOVE_OFFSET,0,0),duration=1,easing=gui.EASING_INBACK})
		timer.delay(1, false, function()
			self.node["credit/window"]:show()
			self.node["title/window"]:hide()
			self.node["credit/credits_window"]:set_scale(vmath.vector3(0.01,0.01,0.01))
			self.node["credit/credits_window"]:animate("scale", 1, gui.EASING_OUTBACK, 1,0)
			msg.post(".", "acquire_input_focus")
		end)
		button:set_scale(button.original_scale)
end


function show_pause_menu(self,action_id,action,button)
	defrx.notify("cancel_shaking")
	timer.delay(0.01, false, function()
		self.node["ingame/pause_btn"].enabled=false
		self.node["pause/window"]:show()
		self.node["pause/pause_menu_window"]:set_scale(vmath.vector3(0.01,0.01,0.01))
		self.node["pause/pause_menu_window"]:animate("scale", 1, gui.EASING_OUTBACK, 0.1,0,function()
			defrx.notify("pause_time")
		end)
	end)
end

function hide_pause_menu(self,action_id,action,button)
	self.node["ingame/pause_btn"].enabled=true
	defrx.notify("play_time")
	self.node["pause/window"]:hide()
	button:set_scale(button.original_scale)
end

function hide_option(self,action_id,action,button)
		sound.play("#slide_out")
		msg.post(".", "release_input_focus")
		self.node["option/option_window"]:animate("scale", 0.01, gui.EASING_OUTBACK, 0.2,0,function()
		self.node["option/window"]:hide()
		self.node["title/window"]:show()
		defrx.notify("move_cam", {position=vmath.vector3(-CAM_MOVE_OFFSET,0,0),duration=1,easing=gui.EASING_OUTBACK})
		self.node["title/window"]:animate("position.x", 0, gui.EASING_OUTBACK, 1,0,function()
			msg.post(".", "acquire_input_focus")
		end)
	end)
	button:set_scale(button.original_scale)
end

function hide_credits(self,action_id,action,button)
		sound.play("#slide_out")
		msg.post(".", "release_input_focus")
		self.node["credit/window"]:animate("position.x", -850, gui.EASING_OUTBACK, 1,0,function()
			self.node["credit/window"]:hide()
			self.node["credit/window"]:set_position(vmath.vector3())
			msg.post(".", "acquire_input_focus")
		end)
		timer.delay(0.1, false, function()
			self.node["title/window"]:show()
			defrx.notify("move_cam", {position=vmath.vector3(CAM_MOVE_OFFSET,0,0),duration=1,easing=gui.EASING_OUTBACK})
			self.node["title/window"]:animate("position.x", 0, gui.EASING_OUTBACK, 1,0)
			
		end)
		button:set_scale(button.original_scale)
		button.mute=true
end

function hide_store(self,action_id,action,button)
		sound.play("#slide_out")
		msg.post(".", "release_input_focus")
		self.node["store/window"]:animate("position.y", -1500, gui.EASING_OUTBACK, 1,0,function()
			self.node["store/window"]:hide()
			self.node["store/window"]:set_position(vmath.vector3())
			msg.post(".", "acquire_input_focus")
		end)
		timer.delay(0.1, false, function()
			self.node["title/window"]:show()
			defrx.notify("move_cam", {position=vmath.vector3(0,CAM_MOVE_OFFSET,0),duration=1,easing=gui.EASING_OUTBACK})
			self.node["title/window"]:animate("position.y", 0, gui.EASING_OUTBACK, 1,0)
		end)
		button:set_scale(button.original_scale)
end

function reload_scene(self,action_id,action,button)
		sound.play("#button_touch")
		msg.post(PROXY, "change_scene",{next="#ingame"})
end

local function hover(self,action_id,action,button)
	--pprint(button)
	self.hover=button
	defrx.notify("on_gui",{value=true})
end

local function change_bgm_state(self,action_id,action,button)
	self.bgm = not self.bgm
	defrx.notify("set_sound",{sfx=self.sfx,bgm=self.bgm})
	button:set_scale(button.original_scale)
end

local function change_sfx_state(self,action_id,action,button)
	self.sfx = not self.sfx
	defrx.notify("set_sound",{sfx=self.sfx,bgm=self.bgm})
	button:set_scale(button.original_scale)
end

local function request_ads_remove(self,action_id,action,button)

end

local function request_restore_purchase(self,action_id,action,button)

end

local function show_privacy_policy(self,action_id,action,button)

end

local function previous_skin(self,action_id,action,button)
	msg.post(".", "release_input_focus")
	sound.play("#swipe",{delay=0.05})
	self.node["store/center"]:animate("rotation.z",self.node["store/center"]:get_rotation().z+60,gui.EASING_OUTQUINT,0.5)
	self.node["store/planet"]:animate("rotation.z",self.node["store/planet"]:get_rotation().z+60,gui.EASING_OUTQUINT,0.5,0.02,function()
		msg.post(".", "acquire_input_focus")
		self.node["store/center"]:set_rotation(vmath.vector3())
		self.skin_cursor=self.skin_cursor+1
		skin_apply(self)
	end)
	button.mute=true
	sound.play("#pick")
end

local function next_skin(self,action_id,action,button)
	msg.post(".", "release_input_focus")
	sound.play("#swipe",{delay=0.05})
	self.node["store/center"]:animate("rotation.z",self.node["store/center"]:get_rotation().z-60,gui.EASING_OUTQUINT,0.5)
	self.node["store/planet"]:animate("rotation.z",self.node["store/planet"]:get_rotation().z-60,gui.EASING_OUTQUINT,0.5,0.02,function()
		msg.post(".", "acquire_input_focus")
		self.node["store/center"]:set_rotation(vmath.vector3())
		self.skin_cursor=self.skin_cursor-1
		skin_apply(self)
	end)
	button.mute=true
	sound.play("#pick")
end

local function flag_positioning(self,flag)
	local pos = self.node["ingame/flag_icon"]:get_position()
	if flag<10 then
		pos.x=620
	elseif flag<100 then
		pos.x=590
	else
		pos.x=560
	end
	self.node["ingame/flag_icon"]:set_position(pos)
end

local function neon_effect(node)
	node:animate("color.x",1,gui.EASING_INOUTBOUNCE,3,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	node:animate("color.y",0.3,gui.EASING_LINEAR,2,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	node:animate("color.z",1,gui.EASING_INOUTBOUNCE,3,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
end

local function button_initialize(button,delay)
	button:set_scale(vmath.vector3(0.01,0.01,0.01))
	button:animate("scale", 1, gui.EASING_OUTBACK, 1,delay)
	sound.play("#blob",{delay=delay*0.7})
end

local function purchase_released(self,action_id,action,button)

	if self.skin_data[self.skin_cursor].own then
		defrx.notify("request_equip", {num=self.skin_cursor})
		sound.play("#equip")
	else
		defrx.notify("request_purchase", {num=self.skin_cursor})
	end
	--self.node["store/planet"]:set_scale(self.node["store/planet"].original_scale)

	button.mute=true
end

local function purchase_pressed(self,action_id,action,button)
	--self.node["store/planet"]:set_scale(self.node["store/planet"].original_scale*0.8)
	button.flag=true
end

function init(self)
	math.randomseed(os.clock())
	defui.init(self)
	UI.init(self)
	self.play=false
	self.hover=nil
	
	--general button
	defui.create_button(self, "tap_to_start", self.node["title/tap_to_start"]):on_released(start)--
	defui.create_button(self, "option_btn", self.node["title/option_btn"]):on_released(show_option)--
	defui.create_button(self, "credit_btn", self.node["title/credit_btn"]):on_released(show_credits)--
	
	defui.create_button(self, "option_window_exit_btn", self.node["option/option_window_exit_btn"]):on_released(hide_option)
	defui.create_button(self, "credits_window_exit_btn", self.node["credit/credits_window_exit_btn"]):on_released(hide_credits)
	defui.create_button(self, "pause_btn", self.node["ingame/pause_btn"]):on_released(show_pause_menu)
	:on_hover(function(self, message_id, message)
		defrx.notify("on_gui",{value=true})
	end)
	:on_not_hover(function(self, message_id, message)
		defrx.notify("on_gui",{value=false})
	end)--hover
	defui.create_button(self, "resume_btn", self.node["pause/resume_btn"]):on_released(hide_pause_menu)
	defui.create_button(self, "pause_home_btn", self.node["pause/home_btn"]):on_released(reload_scene)
	defui.create_button(self, "over_home_btn", self.node["game_over/home_btn"]):on_released(reload_scene)
	defui.create_button(self, "store_btn", self.node["title/store_btn"]):on_released(show_store)
	defui.create_button(self, "option_bgm_btn", self.node["option/bgm_btn"]):on_released(change_bgm_state)
	defui.create_button(self, "option_sfx_btn", self.node["option/sfx_btn"]):on_released(change_sfx_state)
	defui.create_button(self, "pause_bgm_btn", self.node["pause/bgm_btn"]):on_released(change_bgm_state)
	defui.create_button(self, "pause_sfx_btn", self.node["pause/sfx_btn"]):on_released(change_sfx_state)
	defui.create_button(self, "request_ads_remove", self.node["option/ads_remove_btn"]):on_released(request_ads_remove)
	defui.create_button(self, "restore_purchase_btn", self.node["option/restore_purchase_btn"]):on_released(request_restore_purchase)
	defui.create_button(self, "next_btn", self.node["store/next_btn"]):on_released(previous_skin)
	defui.create_button(self, "previous_btn", self.node["store/previous_btn"]):on_released(next_skin)
	defui.create_button(self, "store_home_btn", self.node["store/home_btn"]):on_released(hide_store)

	for _, general_btn in pairs(self.button) do
		general_btn:on_pressed(function(self,action_id,action)
			general_btn:set_scale(general_btn.initial_scale*0.8)
		end)
	end
	
	defui.create_button(self, "tap_to_buy", self.node["store/tap_to_buy"])
		:on_released(purchase_released)
		:on_pressed(purchase_pressed)
	--defui.create_button(self, "planet", self.node["store/planet"])
	
	
	
	--button
	--slider

	
	--components
	
	self.node["ingame/window"]:hide()
	self.node["game_over/window"]:hide()
	self.node["option/window"]:hide()
	self.node["credit/window"]:hide()
	self.node["pause/window"]:hide()
	self.node["store/window"]:hide()
	self.node["title/window"]:show()
	
	store_init(self)

	self.node["credit/window"]:set_position(vmath.vector3())
	self.node["ingame/window"]:set_position(vmath.vector3())
	self.node["title/window"]:set_position(vmath.vector3())
	self.node["game_over/window"]:set_position(vmath.vector3())
	self.node["option/window"]:set_position(vmath.vector3())
	self.node["pause/window"]:set_position(vmath.vector3())
	
	self.node["title/title"]:set_scale(vmath.vector3(0.01,0.01,0.01))
	self.node["title/title"]:animate("scale", vmath.vector3(0.5,0.5,1), gui.EASING_OUTBACK, 1,0,function()
		--self.node["title/title"]:animate("scale.x",0.550,gui.EASING_INELASTIC,3,5,nil,gui.PLAYBACK_LOOP_PINGPONG)
		--self.node["title/title"]:animate("scale.y",0.450,gui.EASING_INELASTIC,3,5,nil,gui.PLAYBACK_LOOP_PINGPONG)
		--self.node["title/title"]:animate("position.y",self.node["title/title"]:get_position().y-50,gui.EASING_INBACK,3,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	end)
	self.node["title/tap_to_start"]:animate("scale",self.node["title/tap_to_start"]:get_scale()*1.1,gui.EASING_INELASTIC,3,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	self.node["title/tap_to_start"]:animate("rotation.z",5,gui.EASING_INELASTIC,1.5,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	gui.play_particlefx(gui.get_node("title/twinkle"))
	button_initialize(self.node["title/option_btn"],0.1)
	button_initialize(self.node["title/credit_btn"],0.1)
	button_initialize(self.node["title/medal_btn"],0.2)
	button_initialize(self.node["title/leader_board_btn"],0.2)
	button_initialize(self.node["title/store_btn"],0.4)


	for _, btn in pairs(self.button) do
		btn:on_released(function(self,action_id,action)
			btn:set_scale(btn.initial_scale)
			if not btn.mute then
				sound.play("#button_touch")
			end
		end)
		btn:on_not_hover(function(self,action_id,action)
			btn:set_scale(btn.initial_scale)
		end)
	end
	
	--neon_effect(self.node["title/option_btn"])
	--neon_effect(self.node["title/credit_btn"])
	--neon_effect(self.node["title/store_btn"])
	--neon_effect(self.node["option/setting"])
	--neon_effect(self.node["option/bgm_icon"])
	--neon_effect(self.node["option/sfx_icon"])
	--neon_effect(self.node["option/bgm_btn"])
	--neon_effect(self.node["option/sfx_btn"])
	--neon_effect(self.node["option/option_window_exit_btn"])
	--neon_effect(self.node["option/option_window"])
	neon_effect(self.node["option/remove_text"])
	neon_effect(self.node["option/ads_remove_btn"])
	--neon_effect(self.node["option/restore_purchase_btn"])
	--neon_effect(self.node["option/restore_purchase_text"])
	--neon_effect(self.node["option/privacy_policy"])
	--neon_effect(self.node["store/next_btn"])
	--neon_effect(self.node["store/previous_btn"])
	--neon_effect(self.node["pause/pause_menu_window"])
	--neon_effect(self.node["pause/resume_btn"])
	--neon_effect(self.node["pause/home_btn"])
	--neon_effect(self.node["pause/bgm_btn"])
	--neon_effect(self.node["pause/sfx_btn"])
	--RX
	defrx.create_stream("game_over")
	defrx.observe(self, "game_over", function(self, message_id, message)
		sound.stop("#bgm")
		timer.delay(1, false, function()
			self.node["title/window"]:hide()
			self.node["ingame/window"]:hide()
			self.node["game_over/window"]:show()
		end)
	end)
	
	defrx.create_stream("final_score")
	defrx.observe(self, "final_score", function(self, message_id, message)
		local score=0
		local flag=0
		timer.delay(1, false, function()
			if message.score>0 then
				sound.play("#final_score")
			end
		end)
		self.node["game_over/best_score"]:set_text(message.best_score)
		self.score_counter = timer.delay(0.00001, true, function()
			if score>=message.score then
				self.node["game_over/score"]:set_text(message.score)
				timer.cancel(self.score_counter)
				sound.stop("#final_score")
			else
				self.node["game_over/score"]:set_text(math.floor(score))
			end
			score=score+message.score/100
		end)

		self.flag_counter = timer.delay(0.00001, true, function()
			if flag>=message.flag then
				self.node["game_over/flag"]:set_text(message.flag)
				timer.cancel(self.flag_counter)
			else
				self.node["game_over/flag"]:set_text(math.floor(flag))
			end
			flag=flag+message.flag/10
		end)

		self.node["game_over/max_combo"]:set_text(message.max_combo)
	end)
	
	
	defrx.create_stream("change_sound")
	defrx.observe(self, "change_sound", function(self, message_id, message)
		self.bgm=message.bgm
		self.sfx=message.sfx
		if self.bgm then
			self.node["option/bgm_icon"]:change_texture("musicOn")
			self.node["pause/bgm_icon"]:change_texture("musicOn")
		else
			self.node["option/bgm_icon"]:change_texture("musicOff")
			self.node["pause/bgm_icon"]:change_texture("musicOff")
		end
		if self.sfx then
			self.node["option/sfx_icon"]:change_texture("audioOn")
			self.node["pause/sfx_icon"]:change_texture("audioOn")
		else
			self.node["option/sfx_icon"]:change_texture("audioOff")
			self.node["pause/sfx_icon"]:change_texture("audioOff")
		end
		
		
	end)

	
	defrx.create_stream("score")
	defrx.observe(self, "score", function(self, message_id, message)
		self.node["ingame/score"]:set_text(message.score)
		self.node["ingame/score"]:animate("scale", 4, gui.EASING_INBOUNCE, 0.2,0,nil,gui.PLAYBACK_ONCE_PINGPONG)
	end)


	defrx.create_stream("level")
	defrx.observe(self, "level", function(self, message_id, message, sender)
		self.node["ingame/flag"]:set_text(message.flag)
		flag_positioning(self,message.flag)
	end)

	defrx.create_stream("title_color")
	defrx.observe(self, "title_color", function(self, message_id, message, sender)
		self.node["title/title"]:set_color(message.color)
	end)
	defrx.create_stream("get_flag")
	defrx.observe(self, "get_flag", function(self, message_id, message, sender)
		local pos = self.node["title/flag_icon"]:get_position()
		pos.x=600
		local offset = string.len(tostring(message.flag))*15
		pos.x=pos.x-offset
		self.node["title/flag_icon"]:set_position(pos)
		self.node["store/flag_icon"]:set_position(pos)
		self.node["title/flag"]:set_text(message.flag)
		self.node["store/flag"]:set_text(message.flag)
	end)
	
	defrx.notify("request_data",{name="flag"})
	timer.delay(1, false, function()
		msg.post(".", "acquire_input_focus")
	end)
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	
	defui.on_input(self, action_id, action)
	self.hover=nil
end

function final(self)
	defrx.cancel_all_observing(self)
end





	