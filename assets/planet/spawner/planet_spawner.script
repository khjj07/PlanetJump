local DefRX= require "DefUtil.DefRX.DefRX"
go.property("target", hash(""))
go.property("min_scale", 200)
go.property("max_scale", 300)
go.property("min_distance", 0)
go.property("max_distance", 100)
go.property("min_rotate_speed", 30)
go.property("max_rotate_speed", 40)

local DEFAULT_RANGE = 1750
local SPAWN_MIN = 3
local SPAWN_MAX = 5
local MAX_RETRY = 10
local INITIAL_PLANET = 
{
	instance=hash("/initial_planet/planet"),
	position=vmath.vector3(0,0,0),
	rotate_speed=30,
	rotate_direction=1,
	scale=1,
	range=DEFAULT_RANGE,
	used=true
}
function check_spawnable_initial(self,new_planet)
	new_planet.range = DEFAULT_RANGE
	if  vmath.length(new_planet.position-self.player_pos) < DEFAULT_RANGE then
		return false
	end
	for _, planet in pairs(self.planet) do
		local distance = vmath.length(new_planet.position-planet.position)
		if planet.range+new_planet.range > distance then
			return false
		end
	end
	return true
end

function check_spawnable(self,new_planet)
	new_planet.range = DEFAULT_RANGE
	if  vmath.length(new_planet.position-self.player_pos) < DEFAULT_RANGE*3.5 then
		return false
	end
	for _, planet in pairs(self.planet) do
		local distance = vmath.length(new_planet.position-planet.position)
		if planet.range+new_planet.range > distance then
			return false
		end
	end
	return true
end

function random_position_in_range(self,center)
	local pos = vmath.vector3()
	pos=pos+center.position
	local theta = math.pi/180*math.random(1,360)
	local radius = DEFAULT_RANGE*2+math.random(self.min_distance,self.max_distance)
	pos.x = pos.x + math.sin(theta)*radius
	pos.y = pos.y + math.cos(theta)*radius
	return pos
end

function spawn_initial(self,center)
	local new_planet={}
	new_planet.position = random_position_in_range(self,center)
	new_planet.rotate_speed = math.random(self.min_rotate_speed,self.max_rotate_speed) 
	new_planet.rotate_direction = math.random(0,1)
	new_planet.scale = math.random(self.min_scale,self.max_scale)/100
	local retry=0
	while retry<MAX_RETRY and not check_spawnable_initial(self,new_planet) do
		new_planet.position = random_position_in_range(self,center) 
		new_planet.scale = math.random(self.min_scale,self.max_scale)/100
		retry=retry+1
	end
	if retry~=MAX_RETRY then
		local prop = {
			[hash("/planet")]={rotate_speed = new_planet.rotate_speed,rotate_direction = new_planet.rotate_direction,seed=math.random(0,500),play=true},
			[hash("/range")]={seed=math.random(0,500)}
		}
		local instance = collectionfactory.create("#planet",new_planet.position,nil,prop,new_planet.scale)
		new_planet.instance = instance[hash("/planet")]
		table.insert(self.planet, new_planet)
		table.insert(self.position,new_planet.position)
	end
end


function spawn(self,center)
	local new_planet={}
	new_planet.position = random_position_in_range(self,center)
	new_planet.rotate_speed = math.random(self.min_rotate_speed,self.max_rotate_speed) 
	new_planet.rotate_direction = math.random(0,1)
	new_planet.scale = math.random(self.min_scale,self.max_scale)/100
	local retry=0
	while retry<MAX_RETRY and not check_spawnable(self,new_planet) do
		new_planet.position = random_position_in_range(self,center) 
		new_planet.scale = math.random(self.min_scale,self.max_scale)/100
		retry=retry+1
	end
	if retry~=MAX_RETRY then
		local prop = {
			[hash("/planet")]={rotate_speed = new_planet.rotate_speed,rotate_direction = new_planet.rotate_direction,seed=math.random(0,500),play=true},
			[hash("/range")]={seed=math.random(0,500)}
		}
		local instance = collectionfactory.create("#planet",new_planet.position,nil,prop,new_planet.scale)
		new_planet.instance = instance[hash("/planet")]
		table.insert(self.planet, new_planet)
		table.insert(self.position,new_planet.position)
	end
end


local function initialize(self, message_id, message, sender)
	table.insert(self.planet, INITIAL_PLANET)
	for i = 1, math.random(SPAWN_MIN,SPAWN_MAX) do
		spawn_initial(self,INITIAL_PLANET)
	end
	for _, planet in pairs(self.planet) do
		if not planet.used then
			table.insert(self.target, planet)
			for j = 1, math.random(SPAWN_MIN,SPAWN_MAX) do
				timer.delay(0.001*j, false, function()
					spawn(self,planet)
				end)
			end
			planet.used=true
		end
	end
end

function insert_new_near_target(self,from)
	for _, planet in pairs(self.planet) do
		if not planet.used and vmath.length(planet.position-from)<DEFAULT_RANGE*3 then
			table.insert(self.target, planet)
		end
	end
end

function spawn_with_new_target(self, message_id, message, sender)
	insert_new_near_target(self,message.position)
	for _, target in pairs(self.target) do
		if not target.used then
			for j = 1, math.random(SPAWN_MIN,SPAWN_MAX) do
				spawn(self,target)
			end
			target.used=true
		end
	end
end

function remove_planet(self, message_id, message, sender)
	for p, planet in pairs(self.planet) do
		if message.id == planet.instance then
			table.remove(self.planet,p)
			table.remove(self.position,p)
			break
		end
	end
	for t, target in pairs(self.target) do
		if message.id == target.instance then
			table.remove(self.target,t)
			break
		end
	end
	msg.post(sender, "dead_response")
end

function reset_planet(self, message_id, message, sender)
	for p, planet in pairs(self.planet) do
		if message.id == planet.instance then
			planet.used=false
			break
		end
	end
end

function init(self)
	math.randomseed(os.clock())
	DefRX.create_stream("game_start")
	DefRX.observe(self, "game_start", initialize)
	DefRX.create_stream("spawn_planet")
	DefRX.observe(self, "spawn_planet", spawn_with_new_target)
	DefRX.create_stream("remove_planet")
	DefRX.observe(self, "remove_planet", remove_planet)
	DefRX.create_stream("reset_planet")
	DefRX.observe(self, "reset_planet", reset_planet)
	DefRX.create_stream("player_position")
	DefRX.observe(self, "player_position", function(self, message_id, message, sender)
		self.player_pos=message.position
	end)
	self.player_pos=vmath.vector3()
	self.planet={}
	self.target={INITIAL_PLANET}
	self.position = {}
end

function final(self)
	DefRX.cancel_all_observing(self)
end

function update(self,dt)
	DefRX.notify("planet_position", self.position)
	print("planet :"..#self.planet)
end


function on_message(self, message_id, message, sender)
	DefRX.on_message(self, message_id, message, sender)
end