local DefRX= require "DefUtil.DefRX.DefRX"
go.property("gravity_force", 1000)
go.property("rotate_speed", 30)
go.property("rotate_direction", 1)
function init(self)
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/self.rotate_speed)
	
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id==hash("collision_response") and message.other_group==hash("player") then
		if message.own_group==hash("gravity_area") then
			local distance = vmath.length(go.get_world_position()-go.get_world_position(message.other_id))
			local direction =vmath.normalize(go.get_world_position()-go.get_world_position(message.other_id))
			local force = direction*self.gravity_force/((distance^2)/20000)
			print(distance^2)
			local rot = vmath.quat_rotation_z(math.pi/180*90*self.rotate_direction)
			DefRX.notify("gravity", {force=force,rotate_vel=vmath.rotate(rot, direction)*self.rotate_speed/30*distance/400})
		elseif message.own_group==hash("ground") then

		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
