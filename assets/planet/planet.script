local DefRX= require "DefUtil.DefRX.DefRX"
go.property("gravity_force", 7000)
go.property("rotate_speed", 30)
go.property("rotate_direction", 1)
local G=30000
local MAX_DISTANCE = 12000
function check_planet(self, message_id, message, sender)
	if vmath.length(message.position-go.get_world_position())>MAX_DISTANCE then
		DefRX.notify("remove_planet",{id=go.get_id()})
	end
end

function init(self)
	DefRX.create_stream("jump")
	DefRX.observe(self, "jump", check_planet)
	self.ids={"planet","range"}
	if self.rotate_direction == 0 then
		self.rotate_direction=-1
	end
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/self.rotate_speed)
end



function on_message(self, message_id, message, sender)
	DefRX.on_message(self, message_id, message, sender)
	if message_id==hash("collision_response") and message.other_group==hash("player") then
		if message.own_group==hash("gravity_area") then
			local distance = vmath.length(go.get_world_position()-go.get_world_position(message.other_id))
			local direction =vmath.normalize(go.get_world_position()-go.get_world_position(message.other_id))
			local rot = vmath.quat_rotation_z(math.pi/180*90*self.rotate_direction)
			local force = direction*self.gravity_force/((distance^2)/G)+vmath.rotate(rot, direction)*self.rotate_speed/30*distance/400
			DefRX.notify("gravity", {force=force,rotate_vel=vmath.rotate(rot, -direction)*self.rotate_speed})
		elseif message.own_group==hash("ground") then

		end
	end
	if message_id==hash("dead_response") then
		DefRX.cancel_observing(self, "jump")
		timer.delay(0.01, false, function()
			go.delete_all(self.ids)
		end)
	end
end