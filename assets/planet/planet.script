local DefRX= require "DefUtil.DefRX.DefRX"
local G=30000
local MAX_DISTANCE = 12000
local RESET_DISTANCE = 8000
local IMG={
	hash("planet1"),
	hash("planet2"),
	hash("planet3"),
	hash("planet4")
}

go.property("gravity_force", 6500)
go.property("rotate_speed", 20)
go.property("rotate_direction", 1)
go.property("seed", 0)
go.property("play", false)
go.property("min_satellite_num", 0)
go.property("max_satellite_num", 3)
go.property("min_satellite_speed", 5)
go.property("max_satellite_speed", 10)
go.property("min_satellite_distance", 450)
go.property("max_satellite_distance", 450)
go.property("satellite_rotate_direction", 1)

function check_planet(self, message_id, message, sender)
	if vmath.length(message.position-go.get_world_position())>MAX_DISTANCE then
		DefRX.notify("remove_planet",{id=go.get_id()})
	elseif vmath.length(message.position-go.get_world_position())>RESET_DISTANCE then
		DefRX.notify("reset_planet",{id=go.get_id()})
	end
	self.landed=false
end

local function random_satellite_speed(self)
	local speed = math.random(self.min_satellite_speed,self.max_satellite_speed)
	while speed==self.rotate_speed do
		speed = math.random(self.min_satellite_speed,self.max_satellite_speed)
	end
	return speed
end

local function spawn_setelliste(self)
	local new_satellite = {}
	local theta = math.random(1,360)
	local distance = math.random(self.min_satellite_distance,self.max_satellite_distance)
	local x,y=math.sin(math.pi/180*theta)*distance,math.cos(math.pi/180*theta)*distance
	new_satellite.position = vmath.vector3(x,y,0)
	new_satellite.speed = random_satellite_speed(self)
	new_satellite.direction = math.random(0,1)
	local prop = {
		[hash("/center")]={rotate_speed = new_satellite.speed,rotate_direction = new_satellite.direction,seed=math.random(0,500)},
	}
	local instance = collectionfactory.create("#satellite",go.get_world_position(),nil,prop)
	go.set_scale(0.25,instance[hash("/satellite")])
	go.set_position(new_satellite.position,instance[hash("/satellite")])
	table.insert(self.ids,instance[hash("/center")])
	table.insert(self.ids,instance[hash("/satellite")])
end

local function initialize(self, message_id, message, sender)
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/self.rotate_speed)
end
local function satellite_rate()
	local num = math.random(1,100)
	num = math.random(1,100)
	if num <= 50 then
		return 0 
	elseif num <= 80 then
		return 1 
	else
		return 2 
	end
end
local function check_satellite(self, message_id, message, sender)
	for _, id in pairs(self.ids) do
		if message.id==id then
			table.remove(self.ids,_)
			msg.post(sender, "dead_response")
			break
		end
	end
end
local function random_planet()
	print(math.random(#IMG))
	msg.post("#sprite", "play_animation",{id=hash("planet"..tostring(math.random(#IMG)))})
end
function init(self)
	DefRX.create_stream("jump")
	DefRX.observe(self, "jump", check_planet)
	DefRX.create_stream("game_start")
	DefRX.observe(self, "game_start", initialize)
	DefRX.create_stream("satellite_dead")
	DefRX.observe(self, "satellite_dead", check_satellite)
	if self.seed==0 then
		self.seed=os.clock()
	end
	math.randomseed(self.seed)
	random_planet()
	self.landed=false
	self.hp=3
	self.ids={"planet","range","ring"}
	if self.rotate_direction == 0 then
		self.rotate_direction=-1
	end
	if self.play then
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/self.rotate_speed)
		for i = 1, satellite_rate() do
			spawn_setelliste(self)
		end
	end
end



function on_message(self, message_id, message, sender)
	DefRX.on_message(self, message_id, message, sender)
	if message_id==hash("collision_response") and message.other_group==hash("player") then
		if message.own_group==hash("gravity_area") then
			local distance = vmath.length(go.get_world_position()-go.get_world_position(message.other_id))
			local direction =vmath.normalize(go.get_world_position()-go.get_world_position(message.other_id))
			local rot = vmath.quat_rotation_z(math.pi/180*90*self.rotate_direction)
			local force = direction*self.gravity_force/((distance^2)/G)+vmath.rotate(rot, direction)*self.rotate_speed/30*distance/400
			DefRX.notify("gravity", {force=force,rotate_vel=vmath.rotate(rot, -direction)*self.rotate_speed})
		elseif message.own_group==hash("planet") and message.other_group==hash("player")  then
			self.landed=true
		end
	end
	if message_id==hash("dead_response") then
		DefRX.cancel_all_observing(self)
		go.delete_all(self.ids)
	end
	if message_id==hash("break") then
		DefRX.cancel_all_observing(self)
		particlefx.play("#planet_explosion")
		go.delete_all(self.ids)
		for i = 1, math.random(0,3) do
			DefRX.notify("spawn_meteor", {type=hash("weak"),position=go.get_world_position()})
		end
		if self.landed then
			DefRX.notify("player_dead")
		end
	end
	
	if message_id==hash("hit") then
		self.hp = self.hp-message.damage
		if self.hp <= 0 then
			msg.post(".", "break")
		end
	end
end

function final(self)
	DefRX.cancel_all_observing(self)
end