local defrx= require "defrx.defrx"
local global=require "global"
local G=30000
local MAX_DISTANCE = 8000
local RESET_DISTANCE = 5000
local IMG={
	hash("planet1"),
	hash("planet2"),
	hash("planet3"),
	hash("planet4"),
	hash("planet5"),
	hash("planet6"),
	hash("planet7"),
	hash("planet8")
}
local COLOR={
	{vmath.vector3(209,157,206),vmath.vector3(255,217,144),vmath.vector3(137,130,254)},
	{vmath.vector3(234,129,73)},
	{vmath.vector3(147,130,255)},
	{vmath.vector3(197,174,137),vmath.vector3(242,103,142),vmath.vector3(138,255,190)},
	{vmath.vector3(255,202,227),vmath.vector3(74,174,191)},
	{vmath.vector3(192,123,123),vmath.vector3(185,249,246)},--재조정 필요
	{vmath.vector3(54,114,74)},
	{vmath.vector3(212,119,204)}
}

local BROKEN={
	hash("broken1"),
	hash("broken2"),
	hash("broken3")
}

go.property("gravity_force", 8000)
go.property("rotate_speed", 25)
go.property("rotate_direction", 1)
go.property("seed", 0)
go.property("play", false)
go.property("min_satellite_speed", 5)
go.property("max_satellite_speed", 10)
go.property("min_satellite_distance", 450)
go.property("max_satellite_distance", 450)
go.property("satellite_rotate_direction", 1)
go.property("break_meteor_min", 2)
go.property("break_meteor_max", 5)

function check_planet(self, message_id, message, sender)
	self.distance=vmath.length(message.position-go.get_world_position())
	if self.distance>MAX_DISTANCE then
		defrx.notify("remove_planet",{id=go.get_id()})
	elseif self.distance>RESET_DISTANCE then
		defrx.notify("reset_planet",{id=go.get_id()})
	end
	if not self.flag and self.landed then
		self.flag=true
		defrx.notify("flag_up", {dist_vector=self.dist_vector})
	end
	self.landed=false
	if self.combo_timer then
		timer.cancel(self.combo_timer)
	end
end

local function random_satellite_speed(self)
	local speed = math.random(self.min_satellite_speed,self.max_satellite_speed)
	while speed==self.rotate_speed do
		speed = math.random(self.min_satellite_speed,self.max_satellite_speed)
	end
	return speed
end

local function spawn_setelliste(self)
	local new_satellite = {}
	local theta = math.random(1,360)
	local distance = math.random(self.min_satellite_distance,self.max_satellite_distance)
	local x,y=math.sin(math.pi/180*theta)*distance,math.cos(math.pi/180*theta)*distance
	new_satellite.position = vmath.vector3(x,y,0)
	new_satellite.speed = random_satellite_speed(self)
	new_satellite.direction = math.random(0,1)
	local prop = {
		[hash("/center")]={rotate_speed = new_satellite.speed,rotate_direction = new_satellite.direction,seed=math.random(0,500)},
		[hash("/satellite")]={seed=math.random(0,500)}
	}
	local instance = collectionfactory.create("#satellite",go.get_world_position(),nil,prop)
	go.set_scale(0.25,instance[hash("/satellite")])
	go.set_position(new_satellite.position,instance[hash("/satellite")])
	table.insert(self.ids,instance[hash("/center")])
	table.insert(self.ids,instance[hash("/satellite")])
end

local function initialize(self, message_id, message, sender)
	self.play=true
	print("speed : "..global.get("speed"))
	go.cancel_animations(".","euler")
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, go.get(".", "euler.z")+360*self.rotate_direction, go.EASING_LINEAR, 60/(self.rotate_speed*global.get("speed")))
end
local function satellite_rate()
	local num = math.random(1,100)
	num = math.random(1,100)
	if num <= 70 then
		return 0 
	else
		return 1
	end
end
local function check_satellite(self, message_id, message, sender)
	for _, id in pairs(self.ids) do
		if message.id==id then
			table.remove(self.ids,_)
			msg.post(sender, "dead_response")
			break
		end
	end
end
local function random_planet(self)
	self.planet_num=math.random(#IMG)
	msg.post("#sprite", "play_animation",{id=hash("planet"..tostring(self.planet_num))})
end
function init(self)
	defrx.create_stream("jump")
	defrx.observe(self, "jump", check_planet)
	defrx.create_stream("game_start")
	defrx.observe(self, "game_start", initialize)
	defrx.create_stream("add_combo")
	defrx.observe(self, "add_combo", initialize)
	defrx.create_stream("satellite_dead")
	defrx.observe(self, "satellite_dead", check_satellite)
	if self.seed==0 then
		self.seed=os.time()
	end
	math.randomseed(self.seed)
	random_planet(self)
	self.ring={}
	self.landed=false
	self.hp=3
	self.ids={"planet","range"}
	if self.rotate_direction == 0 then
		self.rotate_direction=-1
	end
	if self.play then
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360*self.rotate_direction, go.EASING_LINEAR, 60/(self.rotate_speed*global.get("speed")))
		for i = 1, satellite_rate() do
			spawn_setelliste(self)
		end
	else
		defrx.notify("title_color", {color = planet_color(self)})
	end
	particlefx.play("#planet_light")
	particlefx.set_constant("#planet_light", "emitter", "tint", planet_color(self))
	msg.post("#broken", "disable")
end

local function broken(self)
	msg.post("#broken", "enable")
	if self.hp==2 then
		msg.post("#broken", "play_animation",{id=hash("broken1")})
	elseif self.hp==1 then
		msg.post("#broken", "play_animation",{id=hash("broken2")})
	end
end

function planet_fragment(self)
	local vec3 = COLOR[self.planet_num][math.random(#COLOR[self.planet_num])]/255
	local color = vmath.vector4(vec3.x+0.2,vec3.y+0.2,vec3.z+0.2,1)
	return color
end

function planet_color(self)
	local vec3 = COLOR[self.planet_num][1]/255
	local color = vmath.vector4(vec3.x,vec3.y,vec3.z,1)
	return color
end
function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
	if message_id==hash("add_ring") then
		table.insert(self.ring, message.id)
	end
	if message_id==hash("remove_ring") then
		for k, v in pairs(self.ring) do
			if message.id==v then
				table.remove(self.ring,k)
				break
			end
		end
	end
	if message_id==hash("collision_response") and message.other_group==hash("player") then
		if message.own_group==hash("gravity_area") then
			local distance = vmath.length(go.get_world_position()-go.get_world_position(message.other_id))
			local direction =vmath.normalize(go.get_world_position()-go.get_world_position(message.other_id))
			local rot = vmath.quat_rotation_z(math.pi/180*90*self.rotate_direction)
			local force = direction*self.gravity_force/((distance^2)/G)+vmath.rotate(rot, direction)*self.rotate_speed/30*distance/400
			defrx.notify("gravity", {force=force})
		end
	end
	if message_id==hash("contact_point_response") then
		if message.own_group==hash("planet") and message.other_group==hash("player")  then
			if not self.landed then
				self.landed=true
				if not self.flag and self.play then
					if global.get("target_planet")==go.get_id() then
						defrx.notify("add_combo")
					else
						global.set("speed",1)
						defrx.notify("break_combo")
						initialize(self, message_id, message, sender)
					end
					defrx.notify("add_score")
				end
				global.set("target_planet", go.get_id())
			end
			self.dist_vector=message.distance*message.normal
		end
	end
	if message_id==hash("dead_response") then
		defrx.cancel_all_observing(self)
		go.delete_all(self.ids)
	end
	if message_id==hash("flag") then
		table.insert(self.ids,message.id)
	end	
	
	if message_id==hash("hit") and self.hp>0 then
		self.hp = self.hp-message.damage
		print("hp :"..self.hp)
		broken(self)
		if self.hp <= 0 then
			local gain = 2000
			if 	self.distance then
				gain = gain/self.distance
			else
				gain = 2
			end
			defrx.notify("play_sfx", {sound="#explosion_planet",gain=gain})
			defrx.cancel_all_observing(self)
			particlefx.play("#planet_explosion")
			particlefx.set_constant("#planet_explosion", "fragment1", "tint", planet_fragment(self))
			particlefx.set_constant("#planet_explosion", "fragment2", "tint", planet_fragment(self))
			particlefx.set_constant("#planet_explosion", "fragment3", "tint", planet_fragment(self))
			particlefx.set_constant("#planet_explosion", "fragment4", "tint", planet_fragment(self))
			local num = math.random(self.break_meteor_min,self.break_meteor_max) 
			for i = 1, num do
				--print("num :"..num)
				defrx.notify("spawn_meteor", {position=go.get_world_position(),delay=0.1})
			end
			if self.landed then
				defrx.notify("game_over",{position=go.get_world_position()})
				defrx.notify("player_dead")
			end
			go.delete_all(self.ids)
		end
	end
end

function final(self)
	particlefx.stop("#planet_light", { clear = true })
	for k, v in pairs(self.ring) do
		if v then
			msg.post(v, "planet_final",{id=go.get_id()})
		end
	end
	defrx.cancel_all_observing(self)
end